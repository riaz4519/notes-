

Admin Lte tutoril


	-github : https://github.com/Hujjat/laravStart

	

Lesson - 1 - intro




Lesson - 2 - Configure

	**install 

		-laravel new larastart


	AdminLte 3 

		install Admin Lte 3 

		Starter page: http://demo.cssmoban.com/cssthemes5/cpts_992_bmf.0-alpha/starter.html

			-npm install

			-npm install admin-lte@v3.0.0-alpha.2 --save

			-admin lte 3 -> extra -> starter page


	-php artisan make:auth 

	-make a master blade 

	-copy the admin lte 3 starter template code paste it on master

	- delete all the js file and add 

		<script src='/js/app.js'></script>

	- delete all the css file and add

		<link rel="stylesheet" href="css/app.css">

	- go to resource file -> js ->bootstrap.js 

		require('admin-lte');

	- go to resource and -> css - > app.scss

	  @import "~admin-lte/dist/css/adminlte.css";

	-npm run watch - compile run and return if any error is there

Lesson - Configure Fontawesome 5

	- flat icon 
	- download rocket and profile with microphone 

	**
	- fontawesome

		font awesome page - we will use the npm version 

			install - >

			 npm install --save-dev @fortawesome/fontawesome-free


			-in the resource  app.scss

				$fa-font-path:"../webfonts";

				@import "~@fortawesome/fontawesome-free/scss/fontawesome.scss";
				@import "~@fortawesome/fontawesome-free/scss/solid.scss";
				@import "~@fortawesome/fontawesome-free/scss/brands.scss";



Lesson - 4 - Github configaration 


Lesson - 5 - just little bit master blade configaration 

	-chaning the icon 
	-adding new tab

	-show user name 

		Auth:user()->name;

Lesson - 6 - vue router adding to laravel 

	Here we have configure vue-routes .

		-first is installing the routes

			npm install vue-router --save

		-configureing the vue router 

			-for that we have to first 	import vue router in resource -> js app.js

				import VueRouter from 'vue-router'

				Vue.use(VueRouter);

			-then

			let  routes = [

			    { path:'/profile',component:Profile },
			    { path:'/dashboard',component:DashBoard }

			];

			-then

			const router = new VueRouter({

				mode:'history',
				routes : routes,

			});


			-Configuring the front-end


				<router-view> </router-view> At the master tamplate 

				<router-link to='/'></router-link> on the link


		**problems there will be two of them

			one - addisng csrf token on the master

			two - adding the "app-id" one the wrapper - not on the body 


		** vue router will not work on url or page reload for doing that we have to add a router on web.php file

			Route::get('{path}',"HomeController@index")->where( 'path', '([A-z\d-\/_.]+)?' );


Lesson - 7 - Active menu in vue router


	**history node 

	const router = new VueRouter({


		mode:'history',
		routes:routes

	})


	at the last line of the route add 

				Route::get('{path}',"HomeController@index")->where( 'path', '([A-z\d-\/_.]+)?' );


	** for any global styling use app.scss in the resource sass->app.scss


	** <router-link> active class	

		router-link-exact-active

			-when we click on a link the above link apear . so that means it active now . and we can add style to that link and make sure which link is active


Lesson - 8 - Custom Color for Font Awesome Icons and How Logout Works in Laravel


		--logout

			<a class="dropdown-item" href="{{ route('logout') }}"
			   onclick="event.preventDefault();
			                 document.getElementById('logout-form').submit();">
			    {{ __('Logout') }}
			</a>

			<form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
			    @csrf
			</form>


		--no color for Fontawesome

			resource -> sass -> _variable.scss

				.text-blue {

					color:$blue;
				}


Lesson - 9 - Customizing User Table with Profile Photo and User 


	-just changed the user table format and the refreshed it
	-added user type table and the default is user 

	-added bio and photo to

Lesson - 10 - Create User Managment Component

	nothing much just created the User component


Lesson - 11 - Display Users in Table and Modal Window for Creating new User

	-just configuring the user showing table 
	-adding modal window to the Users component
	-using variable.sass  for adding font-awesome color


Lesson 12 - Using VFrom for Back-end Error Handling in Laravel and Vuejs

	*Introduction- for validate form to handle laravel back-end validation with vue

	**install 
		-npm i axios vform

	**Enviornment setup

		-app. js import 

			-import { Form, HasError, AlertError } from 'vform'
			-Register two global component

				Vue.component(HasError.name, HasError)
				Vue.component(AlertError.name, AlertError)

			-Register a Global Variable 
				-window.Form = Form

	**adding the form to the User.Vue


			<div class="modal fade" id="addNew" tabindex="-1" role="dialog" aria-labelledby="addNewLabel" aria-hidden="true">
	            <div class="modal-dialog modal-dialog-centered" role="document">
	                <div class="modal-content">
	                    <div class="modal-header">
	                        <h5 class="modal-title" id="exampaddNew">Modal title</h5>
	                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
	                            <span aria-hidden="true">&times;</span>
	                        </button>
	                    </div>
	                    <div class="modal-body">

	                        <div class="form-group">
	                            <label>Username</label>
	                            <input v-model="form.name" type="text" name="name"
	                                   placeholder="Name"
	                                   class="form-control" :class="{ 'is-invalid': form.errors.has('name') }">
	                            <has-error :form="form" field="name"></has-error>
	                        </div>

	                        <div class="form-group">
	                            <label>Email</label>
	                            <input v-model="form.email" type="email" name="email"
	                                   placeholder="Email"
	                                   class="form-control" :class="{ 'is-invalid': form.errors.has('email') }">
	                            <has-error :form="form" field="email"></has-error>
	                        </div>

	                        <div class="form-group">

	                            <textarea v-model="form.bio" id="bio" type="text" name="bio"
	                                   placeholder="bio"
	                                   class="form-control" :class="{ 'is-invalid': form.errors.has('bio') }">
	                            </textarea>
	                            <has-error :form="form" field="bio"></has-error>
	                        </div>

	                        <div class="form-group">

	                            <select v-model="form.type" id="type"  name="type"

	                                   class="form-control" :class="{ 'is-invalid': form.errors.has('type') }">

	                                <option value="">Select User Role</option>
	                                <option value="admin">Admin</option>
	                                <option value="user">Standard USer</option>
	                                <option value="author">Author</option>

	                            </select>
	                            <has-error :form="form" field="type"></has-error>
	                        </div>

	                        <div class="form-group">

	                            <input v-model="form.name" id="password" type="password" name="password"
	                                   placeholder="password"
	                                   class="form-control" :class="{ 'is-invalid': form.errors.has('password') }">
	                            <has-error :form="form" field="password"></has-error>
	                        </div>


	                    </div>
	                    <div class="modal-footer">
	                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
	                        <button type="button" class="btn btn-primary">Create</button>
	                    </div>
	                </div>
	            </div>
	        </div>

	 ** In data 

	 	data(){
            return {

                form:new Form({

                    name:'',
                    email:'',
                    password:'',
                    type:'',
                    bio:'',
                    photo:''

                })


            }
        }


Lesson - 13 - API Resource Controller

	-submit by vue 

		@submit.prevent="createUser"

	-function will be called

		createUser:function(){



				this.form.post('/api/user');


		}

	-create a api controller 

		-php artisan make:controller API/UserController --api
			-api user have index ,store,update and delete functionality

		-to register the controller to the router

			-single
				-Route::apiResource('user','UserController');

			-Multiple --apiResources

				-Route::apiResources([

					'user'=>'UserController',
					'whatever' =>'WhatEverController'


				])


Lesson - 14 - Insert user Data to DataBase Using Axios in laravel 


		this is for uploading the datas to the database

	-on click create button createUser method will run

			this.form.post('api/user')

	-check with a response message 

	 	return ['message'=>'hello wrl'];


	 -create the user 

	 retrun User:create([

	 	'name' => $request['name'];

	 ])

Lesson - 15 - Nice Server Validation with Laravel and Vue js (handle with vForm)

	- Just normal validation at the server site 

	- it works good 



Lesson - 16 - Display Users from Database in Table Using Axios in Laravel and Vue


	- first creating a methods loadUser

		methods:{

		loadUser:function(){


			axios.get("/api/users").then((response) => {

				this.users.response.data.data;
			})

		}

		}

	-call it from created Method "life cycle"

		created(){

			loadUser();


		}

	-displaying to the user

	<tr v-for="user in users" :key="user.id"></tr>


Lesson - 17 - Global Vuejs Filters and Momentjs Instead of Carbon in Laravel and Vue


	we will learn about or remind about filters and then learn momentjs

	*** problem faced about 500 error always look for the error message in the network tab and also header params and response 


	**Filter
		-use for change the outcome of the data as we know 
		-declear a global filter laravel in the App.js file

			- Vue.filter('upText',function(text){


				return text.charAt(0).toUpperCase() + text.slice(1);

			})


	**Moment js 

		-its a libray like carbon but it uses javascript insted of php

		-install 
			npm install moment --save

			-import it globally in app.js

				import moment from 'moment'

		-using it with the filter

			-Vue.filter('myDate',function (created) {

			    return moment(created).format('MMMM DD YYYY')

			})

		**call from vue 

			{{ data | filter name }}



Lesson - 18 - ProgressBar with Vuejs and Laravel When Create new Record with Ajax.


	vue-progressbar is progress plugin for vue

	-install & setup
		-install 
			-npm install vue-progressbar --save

		-setup

			-  import it on the app.js if you want to make it global like

				import VueProgressBar from 'vue-progressbar'

				Vue.use(VueProgressBar, {
				    color: 'rgb(143, 255, 199)',
				    failedColor: 'red',
				    height: '3px'
				})

	-using on vue template

		-**place this tag under the master .Under the <router-view></router-view> 

		<vue-progress-bar></vue-progress-bar>

		- call it on the method when creating user as a example 


              this.$Progress.start();

             	 this.form.post('api/user');

              this.$Progress.finish();


Lesson - 19 - Sweet Alert in Laravel 5.7 and Vue after Ajax Request

		De: in this video we will talk about sweetalert2 . its a package that is for makign alert in vue

		and also we will hide the modal

		-install sweetaler2 and setup

			-install 

				-npm install sweetalert2 --save

			-setup

				-import Swal from 'sweetalert2'

				-declear it globally 
					-window.swal = Swal

					const Toast = Swal.mixin({
				    toast: true,
				    position: 'top-end',
				    showConfirmButton: false,
				    timer: 3000
				});

				-window.toast = Toast;
	-use it on methods after finishing alert

              toast.fire({
                  type: 'success',
                  title: 'User Created SuccessFully'
              })

    -hide  modal

    	$("#addNew").modal('hide');


Lesson - 20 - Send HTTP Request Every 3 Seconds to Update Data in Laravel and Vuejs

		in this video we will do a simple thing . we will load our table every three minutes


		created(){

			setInterval(() => this.loadUsers,3000)

		}


Lesson - 21 - Use Custom Event to Send HTTP Request After You Create the User in Laravel and Vuejs


	This video is about autometically updating the table of user after a new user is been created.

	For this we will use the custom event

		-Setup 
			-create a global instance of vue which is called the event bus(net ninja)

				window.Fire = new Vue();

		-implementation

			-when the user is been created we will fire function

				Fire.$emit('afterCreate');

			-then we will receive it

				created(){

					Fire.$on('afterCreate',() =>{

						this.loadUser()
						//this will load our user

					})

				}


Lesson - 22 - Using Promise to Detect Successfull HTTP Request in Laravel and Vue

	this video is about using promise . Promise is a feature that will run the next function after we fullfill the previous requirement.


	-using then(() => { } )

		-this.form.post('api/user').then(() => {

			//if the post runned successfully it will run 

		}).catch(() => {

			//it will run if we have any error

		});


Lesson - 23 - Delete User with Ajax Request and SweetAlert Modal in Laravel and Vuejs


	for this one we will delete a user and when we are deleting we will show a alert that if i want to delete the user or not if yes then it will delelet the user . after deleting the user we will update the table by calling "loadUser" method

		- first setting up the delete button 

			<a href="" @click.prevent="deleteUser(user.id)"> <i class="fa fa-trash red"></i></a>

		- after clickig the trash icon it will call the "deleteUser(user.id)"

			methods:{

				deleteUser:function(user_id){



				}

			}

		-now we will use the sweetalert 2 for showing aler that i want to delete or not

			deleteUser:function(user_id){


			swal.fire({

                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'

                }).then((result) => {

                    if (result.value){

                    this.form.delete("api/user/"+user_id).then(() =>{



                        swal.fire(
                            'Deleted!',
                            'Your file has been deleted.',
                            'success'
                        );
                        Fire.$emit('afterCreate');


                    }).catch(()=> {

                        Swal.fire({
                            type: 'error',
                            title: 'Oops...',
                            text: 'Something went wrong!',
                            footer: '<a href>Why do I have this issue?</a>'
                        })

                    });

                    }


                })
			}



Lesson - 24 - Using One Modal Window for Creating and Updating Data in Laravel and Vuejs



	In this one we will use VForm again to reset and fill the user data . Fill uses like Model binding

	-first making a method for  add new user . becouse we will not show the modal directly

		<button class="btn btn-success" @click="newModal">Add New <i class="fas fa-user-plus"></i></button>

		-then making the method and reset the form value and show the modal

			- methods:{

				newModal:function(){


					this.form.reset();

					$('#addNew').modal('show');

				}
			}

		-we will use the same modal for creating and updating also . so for that we have to fill it with the existing data .

			- first making the button to click and open the modal .this time we need a method calling with a parameter

				<a href="" @click.prevent="editModal(user)" ><i class="fa fa-edit blue"></i></a>

			-making the method ,showing the modal and fill the data with that user we want to edit.

				methods:{

					editModal:function(user){

						this.form.fill(user);
					}

					$('#addNew').modal('show');
				}


Lesson - 25 - Conditionally Switch Between Edit Mode and Create Mode of Modal Window

	Now that we are using a single modal to create and update we need some conditional option to change few title and button text and after submit "methods".For that we will use conditionals


		- first for the submit 

			we will first create "editMode variable"

				editMode:true/false

			<form @subnit.prevent="editMode ? updateUser() : addNew()">

		--following through the button and the title will work as same as submit


Lesson - 26 - Correctly Update User Information with Unique Email in Database with Laravel and Vue

	in this one we will do actual update . First will call the updatUser method . Then there will a validation on laravel side then we will update the data.


		-calling the updateUser on Update

			methods:{

				updateUser:function(){

					this.$Progress.start

					this.form.put('api/user/'+this.form.id).then(() => {

						       //success
                        swal.fire(
                            'Updated!',
                            'Your Info Updated.',
                            'success'
                        );

                        $('#addNew').modal('hide');
                        Fire.$emit('afterCreate');
                        this.$Progress.finish();

					}).catch(() => {


					this.$Progress.fail();


					});

				}
			}

			--laravel validation two new things 
				-passaword sometimes
					-'password' => 'sometimes|string:min:6'

				-email 
					-'email' => 'required|string|email|max:191|unique:users,email,'.$user->id,


Lesson - 27 - Security Issues While Developing API in Laravel and Vuejs

	Have learn the need of api in vue and laravel security . We know that vue.js is a javascript api and it uses api token for authentication where as laravel with php uses session . Now to generate this api token to authenticate our user . we need to learn a bit of Passport so that we can generate api token for authentication and not to expoit our application to other unauthenticated user .


Lesson - 28 - Installing Laravel Passport for API Auth in Laravel 5.7

	Personal access client created successfully.
	Client ID: 1
	Client secret: T2Kn9Ngp2awQhqYaPlN5mS7PPSzemXzqDB7m0X8o
	Password grant client created successfully.
	Client ID: 2
	Client secret: Z54G0RblTUtkFLJBVELZTwqRZ7cRgInBtZHEkcZ1






















	
	