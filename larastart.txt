

Admin Lte tutoril


	-github : https://github.com/Hujjat/laravStart

	

Lesson - 1 - intro




Lesson - 2 - Configure

	**install 

		-laravel new larastart


	AdminLte 3 

		install Admin Lte 3 

		Starter page: http://demo.cssmoban.com/cssthemes5/cpts_992_bmf.0-alpha/starter.html

			-npm install

			-npm install admin-lte@v3.0.0-alpha.2 --save

			-admin lte 3 -> extra -> starter page


	-php artisan make:auth 

	-make a master blade 
	-copy the admin lte 3 template code 
	- src='/js/app.js'

	- 'css/app.css'

	- go to resource file -> js ->bootstrap.js require('admin-lte');

	- go to resource and -> css - > app.scss  @import "~admin-lte/dist/css/adminlte.css";


	-npm run watch - compile run and return if any is there

Lesson - Configure Fontawesome 5

	- flat icon 
	- download rocket and profile with microphone 

	**
	- fontawesome

		font awesome page - we will use the npm version 

			install - > npm install --save-dev @fortawesome/fontawesome-free


			-in the resource  app.scss

				$fa-font-path:"../webfonts";

				@import "~@fortawesome/fontawesome-free/scss/fontawesome.scss";
				@import "~@fortawesome/fontawesome-free/scss/solid.scss";
				@import "~@fortawesome/fontawesome-free/scss/brands.scss";



Lesson - 4 - Github configaration





Lesson - 5 - just little bit master blade configaration 

	-chaning the icon 
	-adding new tab

Lesson - 6 - vue router adding to laravel 

	Here we have configure vue-routes .

		-first is installing the routes

			npm install vue-router --save

		-configureing the vue router 

			-for that we have to first 	import vue router in resource -> js app.js

				import VueRouter from 'vue-router'

				Vue.use(VueRouter);

			-then

			let  routes = [

			    { path:'/profile',component:Profile },
			    { path:'/dashboard',component:DashBoard }

			];

			-then

			const router = new VueRouter({

				mode:'history',
				routes : routes,

			});


			-Configuring the front-end


				<router-view> </router-view> At the master tamplate 

				<router-link to='/'></router-link> on the link


		**problems there will be two of them

			one - addisng csrf token on the master

			two - adding the "app-id" one the wrapper - not on the body 


		** vue router will not work on url or page reload for doing that we have to add a router on web.php file

			Route::get('{path}',"HomeController@index")->where( 'path', '([A-z\d-\/_.]+)?' );


Lesson - 7 - Active menu in vue router


	**history node 

	const router = new VueRouter({


		mode:'history',
		routes:routes

	})


	at the last line of the route add 

				Route::get('{path}',"HomeController@index")->where( 'path', '([A-z\d-\/_.]+)?' );


	** for any global styling use app.scss in the resource sass->app.scss


	** <router-link> active class	

		router-link-exact-active

			-when we click on a link the above link apear . so that means it active now . and we can add style to that link and make sure which link is active


Lesson - 8 - Custom Color for Font Awesome Icons and How Logout Works in Laravel


		--logout

			<a class="dropdown-item" href="{{ route('logout') }}"
			   onclick="event.preventDefault();
			                 document.getElementById('logout-form').submit();">
			    {{ __('Logout') }}
			</a>

			<form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
			    @csrf
			</form>


		--no color for Fontawesome

			resource -> sass -> _variable.scss

				.text-blue {

					color:$blue;
				}


Lesson - 9 - Customizing User Table with Profile Photo and User 


	-just changed the user table format and the refreshed it
	-added user type table and the default is user 

	-added bio and photo to

Lesson - 10 - Create User Managment Component

	nothing much just created the User component


Lesson - 11 - Display Users in Table and Modal Window for Creating new User

	-just configuring the user showing table 
	-adding modal window to the Users component
	-using variable.sass  for adding font-awesome color


Lesson 12 - Using VFrom for Back-end Error Handling in Laravel and Vuejs

	*Introduction- for validate form to handle laravel back-end validation with vue

	**install 
		-npm i axios vform

	**Enviornment setup

		-app. js import 

			-import { Form, HasError, AlertError } from 'vform'
			-Register two global component

				Vue.component(HasError.name, HasError)
				Vue.component(AlertError.name, AlertError)

			-Register a Global Variable 
				-window.Form = Form

	**adding the form to the User.Vue


			<div class="modal fade" id="addNew" tabindex="-1" role="dialog" aria-labelledby="addNewLabel" aria-hidden="true">
	            <div class="modal-dialog modal-dialog-centered" role="document">
	                <div class="modal-content">
	                    <div class="modal-header">
	                        <h5 class="modal-title" id="exampaddNew">Modal title</h5>
	                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
	                            <span aria-hidden="true">&times;</span>
	                        </button>
	                    </div>
	                    <div class="modal-body">

	                        <div class="form-group">
	                            <label>Username</label>
	                            <input v-model="form.name" type="text" name="name"
	                                   placeholder="Name"
	                                   class="form-control" :class="{ 'is-invalid': form.errors.has('name') }">
	                            <has-error :form="form" field="name"></has-error>
	                        </div>

	                        <div class="form-group">
	                            <label>Email</label>
	                            <input v-model="form.email" type="email" name="email"
	                                   placeholder="Email"
	                                   class="form-control" :class="{ 'is-invalid': form.errors.has('email') }">
	                            <has-error :form="form" field="email"></has-error>
	                        </div>

	                        <div class="form-group">

	                            <textarea v-model="form.bio" id="bio" type="text" name="bio"
	                                   placeholder="bio"
	                                   class="form-control" :class="{ 'is-invalid': form.errors.has('bio') }">
	                            </textarea>
	                            <has-error :form="form" field="bio"></has-error>
	                        </div>

	                        <div class="form-group">

	                            <select v-model="form.type" id="type"  name="type"

	                                   class="form-control" :class="{ 'is-invalid': form.errors.has('type') }">

	                                <option value="">Select User Role</option>
	                                <option value="admin">Admin</option>
	                                <option value="user">Standard USer</option>
	                                <option value="author">Author</option>

	                            </select>
	                            <has-error :form="form" field="type"></has-error>
	                        </div>

	                        <div class="form-group">

	                            <input v-model="form.name" id="password" type="password" name="password"
	                                   placeholder="password"
	                                   class="form-control" :class="{ 'is-invalid': form.errors.has('password') }">
	                            <has-error :form="form" field="password"></has-error>
	                        </div>


	                    </div>
	                    <div class="modal-footer">
	                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
	                        <button type="button" class="btn btn-primary">Create</button>
	                    </div>
	                </div>
	            </div>
	        </div>

	 ** In data 

	 	data(){
            return {

                form:new Form({

                    name:'',
                    email:'',
                    password:'',
                    type:'',
                    bio:'',
                    photo:''

                })


            }
        }


Lesson - 13 - API Resource Controller

	-submit by vue 

		@submit.prevent="createUser"

	-function will be called

		createUser:function(){



				this.form.post('/api/user');


		}

	-create a api controller 

		-php artisan make:controller API/UserController --api
			-api user have index ,store,update and delete functionality

		-to register the controller to the router

			-single
				-Route::apiResource('user','UserController');

			-Multiple --apiResources

				-Route::apiResources([

					'user'=>'UserController',
					'whatever' =>'WhatEverController'


				])


Lesson - 14 - Insert user Data to DataBase Using Axios in laravel 


		this is for uploading the datas to the database

	-on click create button createUser method will run

			this.form.post('api/user')

	-check with a response message 

	 	return ['message'=>'hello wrl'];


	 -create the user 

	 retrun User:create([

	 	'name' => $request['name'];

	 ])

Lesson - 15 - Nice Server Validation with Laravel and Vue js (handle with vForm)

	- Just normal validation at the server site 

	- it works good 



Lesson - 16 - Display Users from Database in Table Using Axios in Laravel and Vue


	- first creating a methods loadUser

		methods:{

		loadUser:function(){


			axios.get("/api/users").then((response) => {

				this.users.response.data.data;
			})

		}

		}

	-call it from created Method "life cycle"

		created(){

			loadUser();


		}

	-displaying to the user

	<tr v-for="user in users" :key="user.id"></tr>










	
	